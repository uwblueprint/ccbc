openapi: 3.0.0
info:
  version: 1.0.0
  title: UW Blueprint Starter Code TypeScript API
  description: An API for the TypeScript Backend of Starter Code

# Authentication
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
  schemas:
    PasswordLogin:
      type: object
      required:
        - email, password
      properties:
        email:
          type: string
        password:
          type: string
    OAuthLogin:
      type: object
      required:
        - idToken
      properties:
        idToken:
          type: string
    AuthorRequest:
      type: object
      required:
        - fullName
      properties:
        id:
          type: number
        fullName:
          type: string
        displayName:
          type: string
          nullable: true
        attribution:
          type: string
          nullable: true
    AuthorResponse:
      type: object
      required:
        - id, fullName, displayName, attribution
      properties:
        id:
          type: number
        fullName:
          type: string
        displayName:
          type: string
          nullable: true
        attribution:
          type: string
          nullable: true
    PublisherRequest:
      type: object
      required:
        - fullName, publishYear
      properties:
        id:
          type: number
        fullName:
          type: string
        publishYear:
          type: string
    PublisherResponse:
      type: object
      required:
        - id, fullName, publishYear
      properties:
        id:
          type: number
        fullName:
          type: string
        publishYear:
          type: string
    Format:
      type: object
      required:
        - format, price, isbn
      properties:
        format:
          type: string
        price:
          type: number
        isbn:
          type: string
    TagRequest:
      type: object
      required:
        - name
      properties:
        id:
          type: number
        name:
          type: string
    TagResponse:
      type: object
      required:
        - id, name
      properties:
        id:
          type: number
        name:
          type: string
    Series:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
          nullable: true
    BookRequest:
      type: object
      required:
        - title, coverImage, formats, minAge, maxAge, authors, publishers, series
      properties:
        id:
          type: number
        title:
          type: string
        coverImage:
          type: string
        titlePrefix:
          type: string
          nullable: true
        seriesOrder:
          type: number
          nullable: true
        illustrator:
          type: string
          nullable: true
        translator:
          type: string
          nullable: true
        formats:
          type: array
          items:
            $ref: "#/components/schemas/Format"
        minAge:
          type: number
        maxAge:
          type: number
        authors:
          type: array
          items:
            $ref: "#/components/schemas/AuthorRequest"
        publishers:
          type: array
          items:
            $ref: "#/components/schemas/PublisherRequest"
        series:
          $ref: "#/components/schemas/Series"
    BookResponse:
      type: object
      required:
        - id, title, coverImage, titlePrefix, seriesOrder, illustrator, translator, formats, minAge, maxAge, authors, publishers, series
      properties:
        id:
          type: number
        title:
          type: string
        coverImage:
          type: string
        titlePrefix:
          type: string
          nullable: true
        seriesOrder:
          type: number
          nullable: true
        illustrator:
          type: string
          nullable: true
        translator:
          type: string
          nullable: true
        formats:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Format"
        minAge:
          type: number
        maxAge:
          type: number
        authors:
          type: array
          items:
            $ref: "#/components/schemas/AuthorResponse"
        publishers:
          type: array
          items:
            $ref: "#/components/schemas/PublisherResponse"
        series:
          $ref: "#/components/schemas/Series"
    ReviewRequestDTO:
      type: object
      required:
        - body, byline, featured, createdBy, publishedA, books, tags
      properties:
        body:
          type: string
        byline:
          type: string
        featured:
          type: boolean
        createdBy:
          type: number
        books:
          type: array
          items:
            $ref: "#/components/schemas/BookRequest"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagRequest"
        publishedAt:
          type: number
          nullable: true
    ReviewResponseDTO:
      type: object
      required:
        - reviewId, body, byline, featured, createdBy, publishedAt, books, tags, updatedAt, createdAt
      properties:
        reviewId:
          type: number
        body:
          type: string
        byline:
          type: string
        featured:
          type: boolean
        createdBy:
          type: number
        publishedAt:
          type: number
        books:
          type: array
          items:
            $ref: "#/components/schemas/BookRequest"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/TagRequest"
        updatedAt:
          type: number
        createdAt:
          type: number
paths:
  /tags:
    get:
      security:
        - bearerAuth: []
      description: Returns a list of existing tags
      responses:
        "200":
          description: Successfully returned a list of existing tags.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string

        "401":
          description: Unauthorized Request.
        "404":
          description: Not Found.
        "500":
          description: Invalid Request.
    post:
      description: Create a new tag
      requestBody:
        required: true
        content:
          application/json:
            type: object
            properties:
              name:
                type: string
      responses:
        "201":
          description: Successfully created a new entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

  /tags/{id}:
    delete:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The tag ID
      description: Delete a tag based on its ID
      responses:
        "204":
          description: Successfully deleted tag based on ID
        "401":
          description: Unauthorized Request
        "500":
          description: Invalid ID

  /entities:
    get:
      security:
        - bearerAuth: []
      tags:
        - Entity
      description: Returns a list of entities
      responses:
        "200":
          description: Successfully returned a list of entities
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - intField, stringField, boolField, enumField, stringArrayField
                  properties:
                    intField:
                      type: integer
                    stringField:
                      type: string
                    stringArrayField:
                      type: array
                      items:
                        type: string
                    enumField:
                      type: string
                      enum: ["A", "B", "C", "D"]
                    boolField:
                      type: boolean
                    fileName:
                      type: string
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

    post:
      security:
        - bearerAuth: []
      tags:
        - Entity
      description: Create a new entity
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                body:
                  type: string
                file:
                  type: string
                  format: binary
      responses:
        "201":
          description: Successfully created a new entity
          content:
            application/json:
              schema:
                type: object
                required:
                  - intField, stringField, boolField, enumField, stringArrayField
                properties:
                  intField:
                    type: integer
                  stringField:
                    type: string
                  stringArrayField:
                    type: array
                    items:
                      type: string
                  enumField:
                    type: string
                    enum: ["A", "B", "C", "D"]
                  boolField:
                    type: boolean
                  fileName:
                    type: string
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

  /entities/{id}:
    get:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The entity ID
      tags:
        - Entity
      description: Returns an entity based on its ID
      responses:
        "200":
          description: Successfully returns entity based on ID
          content:
            application/json:
              schema:
                type: object
                required:
                  - intField, stringField, boolField, enumField, stringArrayField
                properties:
                  intField:
                    type: integer
                  stringField:
                    type: string
                  stringArrayField:
                    type: array
                    items:
                      type: string
                  enumField:
                    type: string
                    enum: ["A", "B", "C", "D"]
                  boolField:
                    type: boolean
                  fileName:
                    type: string
        "401":
          description: Unauthorized
        "500":
          description: Invalid ID

    put:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The entity ID
      tags:
        - Entity
      description: Edit an entity based on its ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                body:
                  type: string
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: Successfully edited entity based on ID
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

    delete:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The entity ID
      tags:
        - Entity
      description: Delete an entity based on its ID
      responses:
        "204":
          description: Successfully deleted entity based on ID
        "401":
          description: Unauthorized
        "500":
          description: Invalid ID

  /entities/files/{fileName}:
    get:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: fileName
          required: true
          schema:
            type: string
          description: The name of the file (UUID) associated with an entity
      tags:
        - Entity
      description: Returns a signed URL to the file associated with an entity
      responses:
        "200":
          description: Successfully returns the signed URL of the file
          content:
            application/json:
              schema:
                type: object
                required:
                  - fileURL
                properties:
                  fileURL:
                    type: string
        "401":
          description: Unauthorized
        "500":
          description: Invalid fileName

  /auth/login:
    post:
      tags:
        - Auth
      description: Login user. Supply either both email and password, or an Google OAuth idToken.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/PasswordLogin"
                - $ref: "#/components/schemas/OAuthLogin"
      responses:
        "200":
          description: Returns access token in response body and sets refreshToken as an httpOnly cookie
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  id:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  roleType:
                    type: string
        "500":
          description: Invalid request

  /auth/{uid}:
    get:
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: The firebase user id
      tags:
        - Auth
      description: Returns a firebase User record given the user id (uid)
      responses:
        "200":
          description: Successfully returns the firebase user
        "500":
          description: Invalid uid

  /auth/register:
    post:
      tags:
        - Auth
      description: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email, password, firstName, lastName
              properties:
                email:
                  type: string
                password:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
      responses:
        "200":
          description: Returns access token in response body and sets refreshToken as an httpOnly cookie
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  id:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  roleType:
                    type: string
        "500":
          description: Invalid request

  /auth/forgotPassword:
    post:
      tags:
        - Auth
      description: Reset password if user forgets their password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        "200":
          description: Successfully sent user a reset password email to change their password
        "500":
          description: Invalid request

  /auth/refresh:
    post:
      security:
        - bearerAuth: []
      tags:
        - Auth
      description: Refresh auth credentials
      responses:
        "200":
          description: Returns access token in response body and sets refreshToken as an httpOnly cookie
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

  /auth/logout/{id}:
    post:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The user ID
      tags:
        - Auth
      description: Logout as user
      responses:
        "204":
          description: Revokes all of the specified user's refresh tokens
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

  /auth/resetPassword/{email}:
    post:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
      tags:
        - Auth
      description: Triggers password reset for user with specified email (reset link will be emailed)
      responses:
        "204":
          description: Successfully sent password reset email
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

  /auth/verifyEmail/{uid}:
    post:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
      tags:
        - Auth
      description: Verifies a user with the given uid
      responses:
        "200":
          description: Successfully verified the user
        "500":
          description: Invalid request

  /users:
    get:
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: id
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The user ID
        - in: query
          name: email
          schema:
            type: string
          description: The user's email
      tags:
        - User
      description: Get all users, optionally filter by a userId or email query parameter to retrieve a single user
      responses:
        "200":
          description: Successfully returned a list of users, or a user filtered by id or email
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - id, authId, firstName, lastName, email, roleType, subscriptionExpiresOn
                  properties:
                    id:
                      type: string
                    authId:
                      type: string
                    firstName:
                      type: string
                    lastName:
                      type: string
                    email:
                      type: string
                    roleType:
                      type: string
                      enum: ["Admin", "Subscriber", "Author"]
                    subscriptionExpiresOn:
                      type: number

        "400":
          description: Cannot query by both user and email
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

    post:
      security:
        - bearerAuth: []
      tags:
        - User
      description: Create new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName, lastName, roleType, email
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                roleType:
                  type: string
                  enum: ["Admin", "Subscriber", "Author"]
                email:
                  type: string
      responses:
        "201":
          description: Successfully created a new user
          content:
            application/json:
              schema:
                type: object
                required:
                  - id, authId, firstName, lastName, email, roleType, subscriptionExpiresOn
                properties:
                  id:
                    type: string
                  authId:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  roleType:
                    type: string
                    enum: ["Admin", "Subscriber", "Author"]
                  subscriptionExpiresOn:
                    type: number
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

    delete:
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: id
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The user ID
        - in: query
          name: email
          schema:
            type: string
          description: The user's email
      tags:
        - User
      description: Deletes a user by userId or email, specified through a query parameter
      responses:
        "204":
          description: Succesfully deleted user
        "400":
          description: Cannot query by both userId and email, invalid userId or email, userId or email is not a string, userId or email not supplied
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

  /users/{id}:
    put:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            # type: integer (postgres)
            # minimum: 1
            type: string
          description: The user ID
      tags:
        - User
      description: Update the user with the specified userId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName, lastName, roleType, email
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                roleType:
                  type: string
                  enum: ["Admin", "Subscriber", "Author"]
                email:
                  type: string
      responses:
        "200":
          description: Successfully updated user
          content:
            application/json:
              schema:
                type: object
                required:
                  - id, authId, firstName, lastName, email, roleType, subscriptionExpiresOn
                properties:
                  id:
                    type: string
                  authId:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  email:
                    type: string
                  roleType:
                    type: string
                    enum: ["Admin", "Subscriber", "Author"]
                  subscriptionExpiresOn:
                    type: number
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

  /reviews:
    post:
      summary: Create a review
      tags:
        - Review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewRequestDTO"
      responses:
        "201":
          description: Successfully created a new review
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewResponseDTO"
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

    get:
      security:
        - bearerAuth: []
      tags:
        - Review
      description: Returns the list of all reviews
      responses:
        "200":
          description: Successfully returned a list of reviews
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewResponseDTO"
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

  /reviews/{reviewId}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Review
      description: Returns the review with the specified id
      responses:
        "200":
          description: Successfully returned the review
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewResponseDTO"
        "401":
          description: Unauthorized
        "500":
          description: Invalid request

    put:
      summary: Updates a review
      tags:
        - Review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewRequestDTO"
      responses:
        "201":
          description: Successfully updated the review
        "401":
          description: Unauthorized
        "500":
          description: Invalid request
    delete:
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The review ID
      tags:
        - Review
      description: Delete a Review based on its ID
      responses:
        "204":
          description: Successfully deleted Review based on ID
        "401":
          description: Unauthorized
        "500":
          description: Invalid ID    
  /genres:
    get:
      security:
        - bearerAuth: []
      tags:
        - Genre
      description: Returns the list of existing genres
      responses:
        '200':
          description: Successfully returned a list of existing genres. 
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
        '401':
          description: Unauthorized Request.
        '500':
          description: Invalid Request.
